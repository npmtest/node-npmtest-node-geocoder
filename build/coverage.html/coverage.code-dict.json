{"/home/travis/build/npmtest/node-npmtest-node-geocoder/test.js":"/* istanbul instrument in package npmtest_node_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/lib.npmtest_node_geocoder.js":"/* istanbul instrument in package npmtest_node_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_geocoder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_geocoder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-geocoder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_geocoder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_geocoder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_geocoder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_geocoder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_geocoder.__dirname + '/lib.npmtest_node_geocoder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/index.js":"'use strict';\n\nvar GeocoderFactory = require('./lib/geocoderfactory.js');\n\nvar Exports = GeocoderFactory.getGeocoder.bind(GeocoderFactory);\n\nmodule.exports =  Exports;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoderfactory.js":"'use strict';\n\nvar Helper = require('./helper.js');\nvar Geocoder = require('./geocoder.js');\n\nvar HttpAdapter = require('./httpadapter/httpadapter.js');\nvar HttpsAdapter = require('./httpadapter/httpsadapter.js');\nvar RequestAdapter = require('./httpadapter/requestadapter.js');\n\nvar GoogleGeocoder = require('./geocoder/googlegeocoder.js');\nvar HereGeocoder = require('./geocoder/heregeocoder.js');\nvar AGOLGeocoder = require('./geocoder/agolgeocoder.js');\nvar FreegeoipGeocoder = require('./geocoder/freegeoipgeocoder.js');\nvar DataScienceToolkitGeocoder = require('./geocoder/datasciencetoolkitgeocoder.js');\nvar OpenStreetMapGeocoder = require('./geocoder/openstreetmapgeocoder.js');\nvar LocationIQGeocoder = require('./geocoder/locationiqgeocoder.js');\nvar MapQuestGeocoder = require('./geocoder/mapquestgeocoder.js');\nvar OpenMapQuestGeocoder = require('./geocoder/openmapquestgeocoder.js');\nvar YandexGeocoder = require('./geocoder/yandexgeocoder.js');\nvar GeocodioGeocoder = require('./geocoder/geocodiogeocoder.js');\nvar OpenCageGeocoder = require('./geocoder/opencagegeocoder.js');\nvar NominatimMapquestGeocoder = require('./geocoder/nominatimmapquestgeocoder.js');\nvar TomTomGeocoder = require('./geocoder/tomtomgeocoder.js');\nvar SmartyStreets = require('./geocoder/smartystreetsgeocoder.js');\nvar TeleportGeocoder = require('./geocoder/teleportgeocoder.js');\nvar OpendataFranceGeocoder = require('./geocoder/opendatafrancegeocoder.js');\n\n/**\n* Geocoder Facotry\n*/\nvar GeocoderFactory = {\n\n  /**\n  * Return an http adapter by name\n  * @param  <string> adapterName adapter name\n  * @return <object>\n  */\n  _getHttpAdapter: function(adapterName, options) {\n    if (adapterName === 'http') {\n      return new HttpAdapter(null, options);\n    }\n    if (adapterName === 'https') {\n      return new HttpsAdapter(null, options);\n    }\n    if (adapterName === 'request') {\n      return new RequestAdapter(null, options);\n    }\n  },\n  /**\n  * Return a geocoder adapter by name\n  * @param  <string> adapterName adapter name\n  * @return <object>\n  */\n  _getGeocoder: function(geocoderName, adapter, extra) {\n    if (geocoderName === 'google') {\n      return new GoogleGeocoder(adapter, {clientId: extra.clientId, apiKey: extra.apiKey, language: extra.language, region: extra.region, excludePartialMatches: extra.excludePartialMatches, channel: extra.channel});\n    }\n    if (geocoderName === 'here') {\n      return new HereGeocoder(adapter, {appId: extra.appId, appCode: extra.appCode, language: extra.language, politicalView: extra.politicalView, country: extra.country, state: extra.state});\n    }\n    if (geocoderName === 'agol') {\n      return new AGOLGeocoder(adapter, {client_id: extra.client_id, client_secret: extra.client_secret});\n    }\n    if (geocoderName === 'freegeoip') {\n      return new FreegeoipGeocoder(adapter);\n    }\n    if (geocoderName === 'datasciencetoolkit') {\n      return new DataScienceToolkitGeocoder(adapter, {host: extra.host});\n    }\n    if (geocoderName === 'openstreetmap') {\n      return new OpenStreetMapGeocoder(adapter, {language: extra.language});\n    }\n    if (geocoderName === 'locationiq') {\n      return new LocationIQGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'mapquest') {\n      return new MapQuestGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'openmapquest') {\n      return new OpenMapQuestGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'yandex') {\n      return new YandexGeocoder(adapter, {language: extra.language});\n    }\n    if (geocoderName === 'geocodio') {\n      return new GeocodioGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'opencage') {\n      return new OpenCageGeocoder(adapter, extra.apiKey, extra);\n    }\n    if (geocoderName === 'nominatimmapquest') {\n      return new NominatimMapquestGeocoder(adapter, {language: extra.language, apiKey: extra.apiKey});\n    }\n    if (geocoderName === 'tomtom') {\n      return new TomTomGeocoder(adapter, {apiKey: extra.apiKey});\n    }\n    if (geocoderName === 'smartystreets') {\n      return new SmartyStreets(adapter, extra.auth_id, extra.auth_token);\n    }\n    if (geocoderName === 'teleport') {\n      return new TeleportGeocoder(adapter, extra.apiKey, extra);\n    }\n    if (geocoderName === 'opendatafrance') {\n      return new OpendataFranceGeocoder(adapter);\n    }\n\n    throw new Error('No geocoder provider find for : ' + geocoderName);\n  },\n  /**\n  * Return an formatter adapter by name\n  * @param  <string> adapterName adapter name\n  * @return <object>\n  */\n  _getFormatter: function(formatterName, extra) {\n    if (formatterName === 'gpx') {\n      var GpxFormatter = require('./formatter/gpxformatter.js');\n\n      return new GpxFormatter();\n    }\n\n    if (formatterName === 'string') {\n      var StringFormatter = require('./formatter/stringformatter.js');\n\n      return new StringFormatter(extra.formatterPattern);\n    }\n  },\n  /**\n  * Return a geocoder\n  * @param  <string|object> geocoderAdapter Geocoder adapter name or adapter object\n  * @param  <string|object> httpAdapter     Http adapter name or adapter object\n  * @param  <array>         extra           Extra parameters array\n  * @return <object>\n  */\n  getGeocoder: function(geocoderAdapter, httpAdapter, extra) {\n    if (typeof geocoderAdapter === 'object') {\n      extra = geocoderAdapter;\n      geocoderAdapter = null;\n      httpAdapter = null;\n    }\n\n    if (!extra) {\n      extra = {};\n    }\n\n    if (extra.httpAdapter) {\n      httpAdapter = extra.httpAdapter;\n    }\n\n    if (extra.provider) {\n      geocoderAdapter = extra.provider;\n    }\n\n    if (!httpAdapter) {\n      httpAdapter = 'https';\n    }\n\n    if (!geocoderAdapter) {\n      geocoderAdapter = 'google';\n    }\n\n    if (Helper.isString(httpAdapter)) {\n      httpAdapter = this._getHttpAdapter(httpAdapter, extra);\n    }\n\n    if (Helper.isString(geocoderAdapter)) {\n      geocoderAdapter = this._getGeocoder(geocoderAdapter, httpAdapter, extra);\n    }\n\n    var formatter = extra.formatter;\n\n    if (Helper.isString(formatter)) {\n      formatter = this._getFormatter(formatter, extra);\n    }\n\n    return new Geocoder(geocoderAdapter, formatter);\n  }\n};\n\nmodule.exports = GeocoderFactory;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/helper.js":"'use strict';\n\n/**\n* Helper object\n*/\nvar Helper = {\n  isString: function(testVar) {\n    return typeof testVar === 'string' || testVar instanceof String;\n  }\n};\n\nmodule.exports = Helper;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder.js":"'use strict';\n\nvar BPromise = require('bluebird');\n\n/**\n* Constructor\n* @param <object> geocoder  Geocoder Adapter\n* @param <object> formatter Formatter adapter or null\n*/\nvar Geocoder = function (geocoder, formatter) {\n  this._geocoder = geocoder;\n  this._formatter = formatter;\n};\n\n/**\n* Geocode a value (address or ip)\n* @param <string>   value    Value to geocoder (address or IP)\n* @param <function> callback Callback method\n*/\nGeocoder.prototype.geocode = function (value, callback) {\n  return BPromise.resolve()\n    .bind(this)\n    .then(function() {\n      return BPromise.fromCallback(function(callback) {\n        this._geocoder.geocode(value, callback);\n      }.bind(this));\n    })\n    .then(function(data) {\n      return this._filter(value, data);\n    })\n    .then(function(data) {\n      return this._format(data);\n    })\n    .asCallback(callback);\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param {function} callback Callback method\n*/\nGeocoder.prototype.reverse = function(query, callback) {\n  return BPromise.resolve()\n    .bind(this)\n    .then(function() {\n      return BPromise.fromCallback(function(callback) {\n        this._geocoder.reverse(query, callback);\n      }.bind(this));\n    })\n    .then(function(data) {\n      return this._format(data);\n    })\n    .asCallback(callback);\n};\n\n/**\n* Batch geocode\n* @param <array>    values    array of Values to geocode (address or IP)\n* @param <function> callback\n*\n* @return promise\n*/\nGeocoder.prototype.batchGeocode = function(values, callback) {\n  return BPromise.resolve(values)\n    .bind(this)\n    .map(function(value) {\n      return this.geocode(value)\n        .then(function(value) {\n          return {\n            error: null,\n            value: value\n          };\n        })\n        .catch(function(error) {\n          return {\n            error: error,\n            value: null\n          };\n        });\n    })\n    .asCallback(callback);\n};\n\nGeocoder.prototype._filter = function (value, data) {\n  if (!data || !data.length) {\n    return data;\n  }\n\n  if (value.minConfidence) {\n    data = data.filter(function(geocodedAddress) {\n      if (geocodedAddress.extra && geocodedAddress.extra.confidence) {\n        return geocodedAddress.extra.confidence >= value.minConfidence;\n      }\n    });\n  }\n\n  return data;\n};\n\nGeocoder.prototype._format = function (data) {\n  var _this = this;\n  return BPromise.resolve()\n    .bind(this)\n    .then(function() {\n      if (!data) {\n        return data;\n      }\n\n      var _raw = data.raw;\n\n      data = data.map(function(result) {\n        result.provider = _this._geocoder.name;\n\n        return result;\n      });\n\n      data.raw = _raw;\n      Object.defineProperty(data,'raw',{configurable:false, enumerable:false, writable:false});\n\n      return data;\n    })\n    .then(function(data) {\n      var _data = data;\n      if (this._formatter && this._formatter !== 'undefined') {\n        _data = this._formatter.format(_data);\n      }\n\n      return _data;\n    });\n};\n\nmodule.exports = Geocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/httpadapter/httpadapter.js":"'use strict';\n\nvar HttpError = require('../error/httperror.js');\nvar querystring = require('querystring');\n\n/**\n* HttpAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\nvar HttpAdapter = function(http, options) {\n  if (!http || http === 'undefined') {\n    http = require('http');\n  }\n\n  this.url = require('url');\n  this.http = http;\n  this.options = options;\n};\n\n/**\n* Geocode\n* @param <string>   url      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\nHttpAdapter.prototype.get = function(url, params, callback) {\n\n  var urlParsed = this.url.parse(url);\n  var options = {\n    host: urlParsed.host,\n    path: urlParsed.path + '?' + querystring.stringify(params),\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    }\n  };\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      options[k] = v;\n    }\n  }\n\n  var request = this.http.request(options, function(response) {\n    var str = '';\n    var contentType = response.headers['content-type'];\n    response.on('data', function(chunk) {\n      str += chunk;\n    });\n\n    //the whole response has been recieved, so we just print it out here\n    response.on('end', function() {\n      if (response.statusCode !== 200) {\n        return callback(new Error('Response status code is ' + response.statusCode), null);\n      }\n\n      if (contentType !== undefined && contentType.indexOf('application/json') >= 0) {\n        callback(false, JSON.parse(str));\n      } else {\n        callback(false, str);\n      }\n\n    });\n  });\n\n  if(typeof options.timeout !== 'undefined') {\n    request.setTimeout(options.timeout);\n  }\n\n  var onError = function(err) {\n    var error = err instanceof HttpError ? err : new HttpError(err.message, {\n      code: err.code\n    });\n    callback(error, null);\n  };\n\n  request.on('error', onError);\n\n  request.on('timeout', function() {\n    onError(new HttpError('connect ETIMEDOUT', {\n      code: 'ETIMEDOUT',\n      errno: 'ETIMEDOUT',\n      syscall: 'connect'\n    }));\n  });\n\n  request.end();\n};\n\nHttpAdapter.prototype.supportsHttps = function() {\n  return false;\n};\n\nmodule.exports = HttpAdapter;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/error/httperror.js":"var util = require('util');\n\nvar HttpError = function(message, options) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n\n    this.name = 'HttpError';\n    this.message = message;\n\n    options = options || {};\n\n    for(var k in options) {\n      this[k] = this[k] || options[k];\n    }\n};\n\nutil.inherits(HttpError, Error);\n\nmodule.exports = HttpError;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/httpadapter/httpsadapter.js":"var HttpAdapter = require('./httpadapter.js');\nvar util = require('util');\n\n/**\n* HttpsAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\nvar HttpsAdapter = function(http,options) {\n  if (!http || http === 'undefined') {\n    http = require('https');\n  }\n\n  this.url = require('url');\n  this.http = http;\n  this.options = options;\n};\n\nHttpAdapter.prototype.supportsHttps = function() {\n  return true;\n};\n\nutil.inherits(HttpsAdapter, HttpAdapter);\n\nmodule.exports = HttpsAdapter;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/httpadapter/requestadapter.js":"'use strict';\n\nvar HttpError = require('../error/httperror.js');\nvar request = require('request-promise');\n\n/**\n* RequestAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\nvar RequestAdapter = function(request, options) {\n  this.options = options;\n};\n\nRequestAdapter.prototype.supportsHttps = function() {\n  return true;\n};\n\n/**\n* get\n* @param <string>   uri      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\nRequestAdapter.prototype.get = function(url, params, callback) {\n  var options = {\n    uri: url,\n    qs: params,\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    },\n    resolveWithFullResponse: true,\n    json: true\n  };\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      options[k] = v;\n    }\n  }\n\n  return request(options).then(function handleResponse(response) {\n    return response.body;\n  })\n  .catch(function(error) {\n    var _error = error.cause ? error.cause : error;\n    throw new HttpError(_error.message, {\n      code: _error.code\n    });\n  })\n  .asCallback(callback);\n};\n\nmodule.exports = RequestAdapter;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/googlegeocoder.js":"'use strict';\n\nvar crypto = require('crypto');\nvar url = require('url');\nvar util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey, region, excludePartialMatches)\n */\nvar GoogleGeocoder = function GoogleGeocoder(httpAdapter, options) {\n  this.options = ['language', 'apiKey', 'clientId', 'region', 'excludePartialMatches', 'channel'];\n\n  GoogleGeocoder.super_.call(this, httpAdapter, options);\n\n  if (this.options.clientId && !this.options.apiKey) {\n    throw new Error('You must specify a apiKey (privateKey)');\n  }\n\n  if (this.options.apiKey && !httpAdapter.supportsHttps()) {\n    throw new Error('You must use https http adapter');\n  }\n};\n\nutil.inherits(GoogleGeocoder, AbstractGeocoder);\n\n// Google geocoding API endpoint\nGoogleGeocoder.prototype._endpoint = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n/**\n * Geocode\n * @param <string>   value    Value ton geocode (Address)\n * @param <function> callback Callback method\n */\nGoogleGeocoder.prototype._geocode = function (value, callback) {\n\n  var _this = this;\n  var params = this._prepareQueryString();\n\n  if (value.address) {\n    var components = null;\n\n    if (value.country) {\n      components = 'country:' + value.country;\n    }\n\n    if (value.zipcode) {\n      if (components) {\n        components += '|';\n      }\n      components += 'postal_code:' + value.zipcode;\n    }\n\n    params.components = this._encodeSpecialChars(components);\n    params.address = this._encodeSpecialChars(value.address);\n  } else if (value.googlePlaceId) {\n    params.place_id = value.googlePlaceId;\n  } else {\n    params.address = this._encodeSpecialChars(value);\n  }\n\n  if (value.language) {\n    params.language = value.language;\n  }\n\n  if (value.region) {\n    params.region = value.region;\n  }\n\n  var excludePartialMatches = params.excludePartialMatches;\n  delete params.excludePartialMatches;\n\n  this._signedRequest(this._endpoint, params);\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n      if (result.status === 'ZERO_RESULTS') {\n        results.raw = result;\n        return callback(false, results);\n      }\n\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {raw: result});\n      }\n\n      for (var i = 0; i < result.results.length; i++) {\n\n        var currentResult = result.results[i];\n\n        if (excludePartialMatches && excludePartialMatches === true && typeof currentResult.partial_match !== 'undefined' && currentResult.partial_match === true) {\n          continue;\n        }\n\n        results.push(_this._formatResult(currentResult));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n\n  });\n\n};\n\nGoogleGeocoder.prototype._prepareQueryString = function () {\n  var params = {\n    'sensor': false\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  if (this.options.region) {\n    params.region = this.options.region;\n  }\n\n  if (this.options.clientId) {\n    params.client = this.options.clientId;\n  } else if (this.options.apiKey) {\n    params.key = this.options.apiKey;\n  }\n\n  if (this.options.channel) {\n    params.channel = this.options.channel;\n  }\n\n  if (this.options.excludePartialMatches && this.options.excludePartialMatches === true) {\n    params.excludePartialMatches = true;\n  }\n\n  return params;\n\n};\n\nGoogleGeocoder.prototype._signedRequest = function (endpoint, params) {\n\n  if (this.options.clientId) {\n    var request = url.parse(endpoint);\n    var fullRequestPath = request.path + url.format({query: params});\n\n    var decodedKey = new Buffer(this.options.apiKey.replace('-', '+').replace('_', '/'), 'base64');\n    var hmac = crypto.createHmac('sha1', decodedKey);\n    hmac.update(fullRequestPath);\n    var signature = hmac.digest('base64');\n\n    signature = signature.replace(/\\+/g, '-').replace(/\\//g, '_');\n\n    params.signature = signature;\n  }\n\n  return params;\n};\n\nGoogleGeocoder.prototype._formatResult = function (result) {\n\n  var googleConfidenceLookup = {\n    ROOFTOP: 1,\n    RANGE_INTERPOLATED: 0.9,\n    GEOMETRIC_CENTER: 0.7,\n    APPROXIMATE: 0.5\n  };\n\n  var extractedObj = {\n    formattedAddress: result.formatted_address || null,\n    latitude: result.geometry.location.lat,\n    longitude: result.geometry.location.lng,\n    extra: {\n      googlePlaceId: result.place_id || null,\n      confidence: googleConfidenceLookup[result.geometry.location_type] || 0,\n      premise: null,\n      subpremise: null,\n      neighborhood: null,\n      establishment: null\n    },\n    administrativeLevels: {\n    }\n  };\n\n  for (var i = 0; i < result.address_components.length; i++) {\n    var addressType = result.address_components[i].types[0];\n    switch (addressType) {\n      //Country\n      case 'country':\n        extractedObj.country = result.address_components[i].long_name;\n        extractedObj.countryCode = result.address_components[i].short_name;\n        break;\n      //Administrative Level 1\n      case 'administrative_area_level_1':\n        extractedObj.administrativeLevels.level1long = result.address_components[i].long_name;\n        extractedObj.administrativeLevels.level1short = result.address_components[i].short_name;\n        break;\n      //Administrative Level 2\n      case 'administrative_area_level_2':\n        extractedObj.administrativeLevels.level2long = result.address_components[i].long_name;\n        extractedObj.administrativeLevels.level2short = result.address_components[i].short_name;\n        break;\n      //Administrative Level 3\n      case 'administrative_area_level_3':\n        extractedObj.administrativeLevels.level3long = result.address_components[i].long_name;\n        extractedObj.administrativeLevels.level3short = result.address_components[i].short_name;\n        break;\n      //Administrative Level 4\n      case 'administrative_area_level_4':\n        extractedObj.administrativeLevels.level4long = result.address_components[i].long_name;\n        extractedObj.administrativeLevels.level4short = result.address_components[i].short_name;\n        break;\n      //Administrative Level 5\n      case 'administrative_area_level_5':\n        extractedObj.administrativeLevels.level5long = result.address_components[i].long_name;\n        extractedObj.administrativeLevels.level5short = result.address_components[i].short_name;\n        break;\n      // City\n      case 'locality':\n        extractedObj.city = result.address_components[i].long_name;\n        break;\n      // Address\n      case 'postal_code':\n        extractedObj.zipcode = result.address_components[i].long_name;\n        break;\n      case 'route':\n        extractedObj.streetName = result.address_components[i].long_name;\n        break;\n      case 'street_number':\n        extractedObj.streetNumber = result.address_components[i].long_name;\n        break;\n      case 'premise':\n        extractedObj.extra.premise = result.address_components[i].long_name;\n        break;\n      case 'subpremise':\n        extractedObj.extra.subpremise = result.address_components[i].long_name;\n        break;\n      case 'establishment':\n        extractedObj.extra.establishment = result.address_components[i].long_name;\n        break;\n      case 'sublocality_level_1':\n      case 'political':\n      case 'sublocality':\n      case 'neighborhood':\n        if(!extractedObj.extra.neighborhood) {\n          extractedObj.extra.neighborhood = result.address_components[i].long_name;\n        }\n        break;\n    }\n  }\n  return extractedObj;\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nGoogleGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n  var params = this._prepareQueryString();\n\n  params.latlng = lat + ',' + lng;\n\n  if (query.language) {\n    params.language = query.language;\n  }\n\n  if (query.result_type) {\n    params.result_type = query.result_type;\n  }\n\n  if (query.location_type) {\n    params.location_type = query.location_type;\n  }\n\n  this._signedRequest(this._endpoint, params);\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {raw: result});\n      }\n\n      var results = [];\n\n      if (result.results.length > 0) {\n        results.push(_this._formatResult(result.results[0]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nGoogleGeocoder.prototype._encodeSpecialChars = function(value) {\n  if (typeof value === 'string') {\n    return value.replace(/\\u001a/g, ' ');\n  }\n\n  return value;\n};\n\nmodule.exports = GoogleGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/abstractgeocoder.js":"'use strict';\n\nvar net = require('net');\nvar ValueError = require('../error/valueerror.js');\n\nfunction formatGeocoderName(name) {\n  return name.toLowerCase().replace(/geocoder$/, '');\n}\n\n/**\n * AbstractGeocoder Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options\n */\nvar AbstractGeocoder = function(httpAdapter, options) {\n  if (!this.constructor.name) {\n    throw new Error('The Constructor must be named');\n  }\n\n  this.name = formatGeocoderName(this.constructor.name);\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error(this.constructor.name + ' need an httpAdapter');\n  }\n  this.httpAdapter = httpAdapter;\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (this.options) {\n    this.options.forEach(function(option) {\n      if (!options[option] || options[option] == 'undefined') {\n        options[option] = null;\n      }\n    });\n  }\n\n  this.options = options;\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\nAbstractGeocoder.prototype.reverse = function(query, callback) {\n  if (typeof this._reverse != 'function') {\n    throw new Error(this.constructor.name + ' no support reverse geocoding');\n  }\n\n  return this._reverse(query, callback);\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode\n* @param <function> callback Callback method\n*/\nAbstractGeocoder.prototype.geocode = function(value, callback) {\n  if (typeof this._geocode != 'function') {\n    throw new ValueError(this.constructor.name + ' does not support geocoding');\n  }\n  if (net.isIPv4(value) && (!this.supportIPv4 || this.supportIPv4 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv4');\n  }\n\n  if (net.isIPv6(value) && (!this.supportIPv6 || this.supportIPv6 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv6');\n  }\n\n  if (this.supportAddress === false && (!net.isIPv4(value) && !net.isIPv6(value))) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding address');\n  }\n\n  return this._geocode(value, callback);\n};\n\nmodule.exports = AbstractGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/error/valueerror.js":"var util = require('util');\n\nvar ValueError = function(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n\n    this.name = 'ValueError';\n    this.message = message;\n};\n\nutil.inherits(ValueError, Error);\n\nmodule.exports = ValueError;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/heregeocoder.js":"var util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state)\n */\nvar HereGeocoder = function HereGeocoder(httpAdapter, options) {\n  this.options = ['appId', 'appCode', 'language', 'politicalView', 'country', 'state'];\n\n  HereGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.appId || !this.options.appCode) {\n    throw new Error('You must specify appId and appCode to use Here Geocoder');\n  }\n};\n\nutil.inherits(HereGeocoder, AbstractGeocoder);\n\n// Here geocoding API endpoint\nHereGeocoder.prototype._geocodeEndpoint = 'https://geocoder.cit.api.here.com/6.2/geocode.json';\n\n// Here reverse geocoding API endpoint\nHereGeocoder.prototype._reverseEndpoint = 'https://reverse.geocoder.api.here.com/6.2/reversegeocode.json';\n\n/**\n * Geocode\n * @param <string>   value    Value ton geocode (Address)\n * @param <function> callback Callback method\n */\nHereGeocoder.prototype._geocode = function (value, callback) {\n\n  var _this = this;\n  var params = this._prepareQueryString();\n\n  if (value.address) {\n    if (value.language) {\n        params.language = value.language;\n    }\n    if (value.politicalView) {\n        params.politicalview = value.politicalView;\n    }\n    if (value.country) {\n        params.country = value.country;\n        if (value.state) {\n            params.state = value.state;\n        } else {\n            delete params.state;\n        }\n    }\n    if (value.zipcode) {\n        params.postalcode = value.zipcode;\n    }\n    params.searchtext = value.address;\n  } else {\n    params.searchtext = value;\n  }\n\n  this.httpAdapter.get(this._geocodeEndpoint, params, function (err, result) {\n    var results = [];\n    results.raw = result;\n\n    if (err) {\n      return callback(err, results);\n    } else {\n      var view = result.Response.View[0];\n      if (!view) {\n        return callback(false, results);\n      }\n\n      // Format each geocoding result\n      results = view.Result.map(_this._formatResult);\n      results.raw = result;\n\n      callback(false, results);\n    }\n  });\n};\n\nHereGeocoder.prototype._prepareQueryString = function () {\n  var params = {\n    'additionaldata': 'Country2,true',\n    'gen': 8\n  };\n\n  if (this.options.appId) {\n    params.app_id = this.options.appId;\n  }\n  if (this.options.appCode) {\n    params.app_code = this.options.appCode;\n  }\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n  if (this.options.politicalView) {\n    params.politicalview = this.options.politicalView;\n  }\n  if (this.options.country) {\n    params.country = this.options.country;\n  }\n  if (this.options.state) {\n    params.state = this.options.state;\n  }\n\n  return params;\n};\n\nHereGeocoder.prototype._formatResult = function (result) {\n  var location = result.Location || {};\n  var address = location.Address || {};\n  var i;\n\n  var extractedObj = {\n    formattedAddress: address.Label || null,\n    latitude: location.DisplayPosition.Latitude,\n    longitude: location.DisplayPosition.Longitude,\n    country: null,\n    countryCode: address.Country || null,\n    state: address.State || null,\n    county: address.County || null,\n    city: address.City || null,\n    zipcode: address.PostalCode || null,\n    district: address.District || null,\n    streetName: address.Street || null,\n    streetNumber: address.HouseNumber || null,\n    building: address.Building || null,\n    extra: {\n      herePlaceId: location.LocationId || null,\n      confidence: result.Relevance || 0\n    },\n    administrativeLevels: {}\n  };\n\n  for (i = 0; i < address.AdditionalData.length; i++) {\n    var additionalData = address.AdditionalData[i];\n    switch (additionalData.key) {\n      //Country 2-digit code\n      case 'Country2':\n        extractedObj.countryCode = additionalData.value;\n        break;\n      //Country name\n      case 'CountryName':\n        extractedObj.country = additionalData.value;\n        break;\n      //State name\n      case 'StateName':\n        extractedObj.administrativeLevels.level1long = additionalData.value;\n        extractedObj.state = additionalData.value;\n        break;\n      //County name\n      case 'CountyName':\n        extractedObj.administrativeLevels.level2long = additionalData.value;\n        extractedObj.county = additionalData.value;\n    }\n  }\n\n  return extractedObj;\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nHereGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n  var params = this._prepareQueryString();\n  params.pos = lat + ',' + lng;\n  params.mode = 'trackPosition';\n\n  this.httpAdapter.get(this._reverseEndpoint, params, function (err, result) {\n    var results = [];\n    results.raw = result;\n\n    if (err) {\n      return callback(err, results);\n    } else {\n      var view = result.Response.View[0];\n      if (!view) {\n        return callback(false, results);\n      }\n\n      // Format each geocoding result\n      results = view.Result.map(_this._formatResult);\n      results.raw = result;\n\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = HereGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/agolgeocoder.js":"'use strict';\n\nvar net = require('net');\n\n/**\n * Constructor\n * @param {Object} httpAdapter Http Adapter\n * @param {Object} options     Options (language, client_id, client_secret)\n */\nvar AGOLGeocoder = function AGOLGeocoder(httpAdapter, options) {\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error('ArcGis Online Geocoder requires a httpAdapter to be defined');\n  }\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (!options.client_id || options.client_id == 'undefined') {\n    options.client_id = null;\n  }\n\n  if (!options.client_secret || options.client_secret == 'undefined') {\n    options.client_secret = null;\n  }\n\n  if (!options.client_secret || !options.client_id) {\n\n    throw new Error('You must specify the client_id and the client_secret');\n  }\n\n  this.options = options;\n\n  this.httpAdapter = httpAdapter;\n  this.cache = {};\n};\n\nAGOLGeocoder.prototype._authEndpoint = 'https://www.arcgis.com/sharing/oauth2/token';\nAGOLGeocoder.prototype._endpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\nAGOLGeocoder.prototype._reverseEndpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode';\n\n//Cached vars\n\n\nAGOLGeocoder.prototype._cachedToken = {\n  'now': function() {\n    return (new Date()).getTime();\n  },\n  'put': function(token, experation,cache) {\n    cache.token = token;\n    //Shave 30 secs off experation to ensure that we expire slightly before the actual expiration\n    cache.tokenExp = this.now() + (experation - 30);\n  },\n  'get' : function(cache) {\n    if(!cache) {\n      return null;\n    }\n\n    if(this.now() <= cache.tokenExp) {\n      return cache.token;\n    } else {\n      return null;\n    }\n  }\n};\n\nAGOLGeocoder.prototype._getToken = function(callback) {\n  var _this = this;\n\n  if(_this._cachedToken.get(_this.cache) !== null) {\n    callback(_this._cachedToken.get());\n    return;\n    }\n\n  var params = {\n    'grant_type': 'client_credentials',\n    'client_id': _this.options.client_id,\n    'client_secret': _this.options.client_secret\n  };\n\n  _this.httpAdapter.get(_this._authEndpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = JSON.parse(result);\n      var tokenExpiration = (new Date()).getTime() + result.expires_in;\n      var token = result.access_token;\n      _this._cachedToken.put(token,tokenExpiration,_this.cache);\n\n      callback(false, token);\n    }\n  });\n};\n\n/**\n * Geocode\n * @param {String}   value    Value to geocode (Address)\n * @param {Function} callback Callback method\n */\nAGOLGeocoder.prototype.geocode = function(value, callback) {\n  var _this = this;\n\n  if (net.isIP(value)) {\n    throw new Error('The AGOL geocoder does not support IP addresses');\n  }\n\n  if (value instanceof Array) {\n    //As defined in http://resources.arcgis.com/en/help/arcgis-rest-api/#/Batch_geocoding/02r300000003000000/\n    throw new Error('An ArcGIS Online organizational account is required to use the batch geocoding functionality');\n  }\n\n  var execute = function (value,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'text':value,\n      'outFields': 'AddNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._endpoint, params, function(err, result) {\n      result = JSON.parse(result);\n        if (err) {\n          return callback(err);\n        } else {\n          //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n          if(result.error){\n            callback(result.error);\n\n            return null;\n          }\n\n          var results = [];\n          for(var i = 0; i < result.locations.length; i++) {\n            results.push(_this._formatResult(result.locations[i]));\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(value,token,callback);\n    }\n  });\n};\n\nAGOLGeocoder.prototype._formatResult = function(result) {\n  if(result.address){\n    return {\n      'latitude' : result.location.y,\n      'longitude' : result.location.x,\n      'country' : result.address.CountryCode,\n      'city' : result.address.City,\n      'state' : result.address.Region,\n      'zipcode' : result.address.Postal,\n      'countryCode' : result.address.CountryCode,\n      'address': result.address.Address,\n      'neighborhood': result.address.Neighborhood,\n      'loc_name': result.address.Loc_name\n    };\n  }\n\n  var country = null;\n  var countryCode = null;\n  var city = null;\n  var state = null;\n  var stateCode = null;\n  var zipcode = null;\n  var streetPreDir = null;\n  var streetType = null;\n  var streetName = null;\n  var streetNumber = null;\n\n  var attributes = result.feature.attributes;\n  for (var property in attributes) {\n    if (attributes.hasOwnProperty(property)) {\n      if(property == 'City') {\n        city = attributes[property];\n      }\n      if(property == 'Postal') {\n        zipcode = attributes[property];\n      }\n      if(property == 'Region') {\n        state = attributes[property];\n      }\n      if(property == 'StPreDir') {\n        streetPreDir = attributes[property];\n      }\n      if(property == 'AddNum') {\n        streetNumber = attributes[property];\n      }\n      if(property == 'StName') {\n        streetName = attributes[property];\n      }\n      if(property == 'StType') {\n        streetType = attributes[property];\n      }\n      if(property == 'Country') {\n        countryCode = attributes[property];\n        country = attributes[property];\n      }\n    }\n  }\n\n  return {\n    'latitude' : result.feature.geometry.y,\n    'longitude' : result.feature.geometry.x,\n    'country' : country,\n    'city' : city,\n    'state' : state,\n    'stateCode' : stateCode,\n    'zipcode' : zipcode,\n    'streetName': streetPreDir + ' ' + streetName + ' ' + streetType,\n    'streetNumber' : streetNumber,\n    'countryCode' : countryCode\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param {function} callback Callback method\n */\nAGOLGeocoder.prototype.reverse = function(query, callback) {\n  var lat = query.lat;\n  var long = query.lon;\n\n  var _this = this;\n\n  var execute = function (lat,long,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'location' : long + ',' + lat,\n      'outFields': 'AddrNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._reverseEndpoint, params, function(err, result) {\n      result = JSON.parse(result);\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if(result.error){\n          callback(result.error,{raw:result});\n          return null;\n        }\n\n        var results = [];\n        results.push(_this._formatResult(result));\n\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(lat,long,token,callback);\n    }\n  });\n};\n\nmodule.exports = AGOLGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/freegeoipgeocoder.js":"var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar FreegeoipGeocoder = function FreegeoipGeocoder(httpAdapter) {\n    this.supportIPv4   = true;\n    this.supportIPv6   = true;\n    this.supportAddress = false;\n    FreegeoipGeocoder.super_.call(this, httpAdapter);\n};\n\nutil.inherits(FreegeoipGeocoder, AbstractGeocoder);\n\n// WS endpoint\nFreegeoipGeocoder.prototype._endpoint = 'http://freegeoip.net/json/';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (IP only)\n* @param <function> callback Callback method\n*/\nFreegeoipGeocoder.prototype._geocode = function(value, callback) {\n    this.httpAdapter.get(this._endpoint + value , { }, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            var results = [];\n\n            results.push({\n                'ip' : result.ip,\n                'countryCode' : result.country_code,\n                'country' : result.country_name,\n                'regionCode' : result.region_code,\n                'regionName' : result.region_name,\n                'city' : result.city,\n                'zipcode' : result.zip_code,\n                'timeZone' : result.time_zone,\n                'latitude' : result.latitude,\n                'longitude' : result.longitude,\n                'metroCode' : result.metro_code\n\n            });\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nmodule.exports = FreegeoipGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/datasciencetoolkitgeocoder.js":"var util             = require('util'),\n    net              = require('net'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar DataScienceToolkitGeocoder = function DataScienceToolkitGeocoder(httpAdapter,options) {\n    this.options     = ['host'];\n    this.supportIPv4 = true;\n\n    DataScienceToolkitGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(DataScienceToolkitGeocoder, AbstractGeocoder);\n\n/**\n* Build DSTK endpoint, allows for local DSTK installs\n* @param <string>   value    Value to geocode (Address or IPv4)\n*/\nDataScienceToolkitGeocoder.prototype._endpoint = function(value) {\n   var ep = { };\n   var host = 'www.datasciencetoolkit.org';\n\n   if(this.options.host) {\n        host =  this.options.host;\n    }\n\n    ep.ipv4Endpoint = 'http://' + host + '/ip2coordinates/';\n    ep.street2coordinatesEndpoint = 'http://' + host + '/street2coordinates/';\n\n    return net.isIPv4(value) ? ep.ipv4Endpoint : ep.street2coordinatesEndpoint;\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address or IPv4)\n* @param <function> callback Callback method\n*/\nDataScienceToolkitGeocoder.prototype._geocode = function(value, callback) {\n\n    var ep = this._endpoint(value);\n    this.httpAdapter.get(ep + value , { }, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n            result = result[value];\n            if (!result) {\n                return callback(new Error('Could not geocode \"' + value + '\".'));\n            }\n\n            var results = [];\n\n            results.push({\n                'latitude' : result.latitude,\n                'longitude' : result.longitude,\n                'country' : result.country_name,\n                'city' : result.city || result.locality,\n                'state' : result.state || result.region,\n                'zipcode' : result.postal_code,\n                'streetName': result.street_name,\n                'streetNumber' : result.street_number,\n                'countryCode' : result.country_code\n            });\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nmodule.exports = DataScienceToolkitGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/openstreetmapgeocoder.js":"var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar OpenStreetMapGeocoder = function OpenStreetMapGeocoder(httpAdapter, options) {\n    this.options = ['language','email','apiKey'];\n\n    OpenStreetMapGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(OpenStreetMapGeocoder, AbstractGeocoder);\n\nOpenStreetMapGeocoder.prototype._endpoint = 'http://nominatim.openstreetmap.org/search';\n\nOpenStreetMapGeocoder.prototype._endpoint_reverse = 'http://nominatim.openstreetmap.org/reverse';\n\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://wiki.openstreetmap.org/wiki/Nominatim#Parameters)\n* @param <function> callback Callback method\n*/\nOpenStreetMapGeocoder.prototype._geocode = function(value, callback) {\n    var _this = this;\n\n    var params = this._getCommonParams();\n    params.addressdetails = 1;\n    if (typeof value == 'string') {\n      params.q = value;\n    } else {\n      for (var k in value) {\n        var v = value[k];\n        params[k] = v;\n      }\n    }\n    this._forceParams(params);\n\n\n    this.httpAdapter.get(this._endpoint , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            var results = [];\n\n            if(result.error) {\n              return callback(new Error(result.error));\n            }\n\n            if (result instanceof Array) {\n              for (var i = 0; i < result.length; i++) {\n                results.push(_this._formatResult(result[i]));\n              }\n            } else {\n              results.push(_this._formatResult(result));\n            }\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nOpenStreetMapGeocoder.prototype._formatResult = function(result) {\n\n    var countryCode = result.address.country_code;\n    if (countryCode) {\n        countryCode = countryCode.toUpperCase();\n    }\n\n    var latitude = result.lat;\n    if (latitude) {\n      latitude = parseFloat(latitude);\n    }\n\n    var longitude = result.lon;\n    if (longitude) {\n      longitude = parseFloat(longitude);\n    }\n\n    return {\n        'latitude' : latitude,\n        'longitude' : longitude,\n        'country' : result.address.country,\n        'city' : result.address.city || result.address.town || result.address.village || result.address.hamlet,\n        'state': result.address.state,\n        'zipcode' : result.address.postcode,\n        'streetName': result.address.road || result.address.cycleway,\n        'streetNumber' : result.address.house_number,\n        'countryCode' : countryCode\n\n    };\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\nOpenStreetMapGeocoder.prototype._reverse = function(query, callback) {\n\n    var _this = this;\n\n    var params = this._getCommonParams();\n    for (var k in query) {\n      var v = query[k];\n      params[k] = v;\n    }\n    this._forceParams(params);\n\n    this.httpAdapter.get(this._endpoint_reverse , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n          if(result.error) {\n            return callback(new Error(result.error));\n          }\n\n          var results = [];\n          if (result instanceof Array) {\n            for (var i = 0; i < result.length; i++) {\n              results.push(_this._formatResult(result[i]));\n            }\n          } else {\n            results.push(_this._formatResult(result));\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nOpenStreetMapGeocoder.prototype._getCommonParams = function(){\n    var params = {};\n\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      if (k === 'language') {\n        k = 'accept-language';\n      }\n      params[k] = v;\n    }\n\n    return params;\n};\n\nOpenStreetMapGeocoder.prototype._forceParams = function(params){\n    params.format = 'json';\n    params.addressdetails = 1;\n};\n\nmodule.exports = OpenStreetMapGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js":"var\n  querystring      = require('querystring'),\n  util             = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\n\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\nLocationIQGeocoder.prototype._geocode = function(value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      switch(k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n\n      var results = responseData.map(this._formatResult).filter(function(result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n\n      callback(false, results);\n    }.bind(this));\n};\n\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\nLocationIQGeocoder.prototype._reverse = function(query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n\n      // locationiq always seemes to answer with a single object instead\n      // of an array\n      var results = [responseData].map(this._formatResult).filter(function(result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n\n      callback(false, results);\n    }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function(result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude' : result.lat ? parseFloat(result.lat) : undefined,\n    'longitude' : result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number;\n    // make sure countrycode is always uppercase to keep node-geocoder api formats\n    transformedResult.countryCode = result.address.country_code.toUpperCase();\n  }\n  return transformedResult;\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nLocationIQGeocoder.prototype._getCommonParams = function() {\n  return {\n    'key': this.apiKey\n  };\n};\n\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\nLocationIQGeocoder.prototype._forceParams = function(params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\n\nmodule.exports = LocationIQGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/mapquestgeocoder.js":"var querystring      = require('querystring'),\n    util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar MapQuestGeocoder = function MapQuestGeocoder(httpAdapter, apiKey) {\n\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error('MapQuestGeocoder needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\n\nMapQuestGeocoder.prototype._endpoint = 'http://www.mapquestapi.com/geocoding/v1';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nMapQuestGeocoder.prototype._geocode = function(value, callback) {\n  var params = {'key' : querystring.unescape(this.apiKey)};\n  if (typeof value === 'object') {\n    if (value.address) {\n      params.street = value.address;\n    }\n    if (value.country) {\n      params.country = value.country;\n    }\n    if (value.zipcode) {\n      params.postalCode = value.zipcode;\n    }\n    if (value.city) {\n      params.city = value.city;\n    }\n  } else {\n    params.location = value;\n  }\n\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/address' , params, function(err, result) {\n    if (err) {\n        return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]),{raw:result});\n      }\n\n      var results = [];\n      if (result.results && result.results.length) {\n        var locations = result.results[0].locations;\n\n        for(var i = 0; i < locations.length; i++) {\n          results.push(_this._formatResult(locations[i]));\n        }\n      }\n\n      results.raw = result;\n\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function(result) {\n  return {\n    'latitude' : result.latLng.lat,\n    'longitude' : result.latLng.lng,\n    'country' : null,\n    'city' : result.adminArea5,\n    'stateCode' : result.adminArea3,\n    'zipcode' : result.postalCode,\n    'streetName': result.street,\n    'streetNumber' : null,\n    'countryCode' : result.adminArea1\n  };\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\nMapQuestGeocoder.prototype._reverse = function(query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse' , { 'location' : lat + ',' + lng, 'key' : querystring.unescape(this.apiKey)}, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      var locations = result.results[0].locations;\n\n      for(var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/openmapquestgeocoder.js":"var querystring = require('querystring'),\n  util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar MapQuestGeocoder = function OpenMapQuestGeocoder(httpAdapter, apiKey) {\n\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'http://open.mapquestapi.com/geocoding/v1';\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nMapQuestGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/address', {\n    'location': value,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]), {raw: result});\n      }\n\n      var results = [];\n\n      var locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function (result) {\n  var MQConfidenceLookup = {\n    POINT: 1,\n    ADDRESS: 0.9,\n    INTERSECTION: 0.8, //less accurate than the MQ description\n    STREET: 0.7,\n    ZIP: 0.5,\n    ZIP_EXTENDED: 0.5,\n    NEIGHBORHOOD: 0.5,\n    CITY: 0.4,\n    COUNTY: 0.3,\n    STATE: 0.2,\n    COUNTRY: 0.1\n  };\n  return {\n    'latitude': result.latLng.lat,\n    'longitude': result.latLng.lng,\n    'country': null,\n    'countryCode': result.adminArea1,\n    'city': result.adminArea5,\n    'state': result.adminArea3,\n    'zipcode': result.postalCode,\n    'streetName': result.street,\n    'streetNumber': null,\n    'extra': {\n      confidence: MQConfidenceLookup[result.geocodeQuality] || 0\n    }\n\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nMapQuestGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'location': lat + ',' + lng,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      var locations;\n\n      if (result.results === undefined || !result.results.length) {\n          return callback(new Error('Incorrect response'));\n      }\n\n      locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/yandexgeocoder.js":"'use strict';\n\nvar util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\nvar YandexGeocoder = function YandexGeocoder(httpAdapter, options) {\n  YandexGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(YandexGeocoder, AbstractGeocoder);\n\nfunction _findKey(result, wantedKey) {\n  var val = null;\n  Object.keys(result).every(function(key) {\n\n  if (key === wantedKey) {\n    val = result[key];\n    return false;\n  }\n\n  if (typeof result[key] === 'object') {\n    val = _findKey(result[key], wantedKey);\n\n    return val === null ? true : false;\n  }\n\n  return true;\n  });\n\n  return val;\n}\n\nfunction _formatResult(result) {\n  var position = result.GeoObject.Point.pos.split(' ');\n  result = result.GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails;\n\n  return {\n    'latitude' : position[0],\n    'longitude' : position[1],\n    'city' : _findKey(result, 'LocalityName'),\n    'state' : _findKey(result, 'AdministrativeAreaName'),\n    'streetName': _findKey(result, 'ThoroughfareName'),\n    'streetNumber' : _findKey(result, 'PremiseNumber'),\n    'countryCode' : _findKey(result, 'CountryNameCode'),\n    'country' : _findKey(result, 'CountryName')\n  };\n}\n\n// Yandex geocoding API endpoint\nYandexGeocoder.prototype._endpoint = 'https://geocode-maps.yandex.ru/1.x/';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nYandexGeocoder.prototype._geocode = function(value, callback) {\n  var params = {\n    geocode : value,\n    format: 'json'\n  };\n\n  if (this.options.language) {\n    params.lang = this.options.language;\n  }\n\n  this.httpAdapter.get(this._endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      result.response.GeoObjectCollection.featureMember.forEach(function(geopoint) {\n        results.push(_formatResult(geopoint));\n      });\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = YandexGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/geocodiogeocoder.js":"var querystring = require('querystring'),\n  util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar GeocodioGeocoder = function GeocodioGeocoder(httpAdapter, apiKey) {\n\n  GeocodioGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'http://api.geocod.io/v1';\n};\n\nutil.inherits(GeocodioGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nGeocodioGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/geocode', {\n    'q': value,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n    if (result.error) {\n      return callback(new Error('Status is ' + result.error), {raw: result});\n    }\n\n    var results = [];\n\n    var locations = result.results;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nGeocodioGeocoder.prototype._formatResult = function (result) {\n  var accuracy = (result.accuracy < 1) ? result.accuracy - 0.1 : 1;\n  return {\n    'latitude': result.location.lat,\n    'longitude': result.location.lng,\n    'country': null,\n    'city': result.address_components.city,\n    'state': result.address_components.state,\n    'zipcode': result.address_components.zip,\n    'streetName': result.address_components.formatted_street,\n    'streetNumber': result.address_components.number,\n    'countryCode': null,\n    'extra': {\n      confidence: accuracy || 0\n    }\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nGeocodioGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'q': lat + ',' + lng,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    var results = [];\n    var locations = result.results;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nmodule.exports = GeocodioGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/opencagegeocoder.js":"var util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n// http://geocoder.opencagedata.com/api.html#confidence\nvar ConfidenceInKM = {\n  10: 0.25,\n  9: 0.5,\n  8: 1,\n  7: 5,\n  6: 7.5,\n  5: 10,\n  4: 15,\n  3: 20,\n  2: 25,\n  1: Number.POSITIVE_INFINITY,\n  0: Number.NaN\n};\n\n/**\n * Constructor\n */\nvar OpenCageGeocoder = function OpenCageGeocoder(httpAdapter, apiKey, options) {\n  this.options = ['language'];\n\n  OpenCageGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'http://api.opencagedata.com/geocode/v1/json';\n  this._ConfidenceInKM = ConfidenceInKM; // In case we need to support v1/v2 and this changes\n};\n\nutil.inherits(OpenCageGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nOpenCageGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n  if (value.address) {\n    if (value.bounds) {\n      if (Array.isArray(value.bounds)) {\n        params.bounds = value.bounds.join(',');\n      }\n      else {\n        params.bounds = value.bounds;\n      }\n    }\n    if (value.countryCode) {\n      params.countrycode = value.countryCode;\n    }\n    if (value.limit) {\n      params.limit = value.limit;\n    }\n    if (value.minConfidence) {\n      params.min_confidence = value.minConfidence;\n    }\n    params.q = value.address;\n  }\n  else {\n    params.q = value;\n  }\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n\n    if (err) {\n      return callback(err);\n    } else {\n\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n\n  });\n\n};\n\nOpenCageGeocoder.prototype._formatResult = function (result) {\n  var confidence = result.confidence || 0;\n  return {\n    'latitude': result.geometry.lat,\n    'longitude': result.geometry.lng,\n    'country': result.components.country,\n    'city': result.components.city,\n    'state': result.components.state,\n    'zipcode': result.components.postcode,\n    'streetName': result.components.road,\n    'streetNumber': result.components.house_number,\n    'countryCode': result.components.country_code,\n    'county': result.components.county,\n    'extra': {\n      confidence: confidence,\n      confidenceKM: this._ConfidenceInKM[result.confidence] || Number.NaN\n    }\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nOpenCageGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  var params = this._getCommonParams();\n  params.q = lat + ' ' + lng;\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      callback(err);\n    } else {\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\n/**\n * Prepare common params\n *\n * @return <Object> common params\n */\nOpenCageGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n  params.key = this.apiKey;\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  return params;\n};\n\nmodule.exports = OpenCageGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/nominatimmapquestgeocoder.js":"var util                  = require('util'),\n    OpenStreetMapGeocoder = require('./openstreetmapgeocoder');\n\n/**\n * Constructor\n */\nvar NominatimMapquestGeocoder = function NominatimMapquestGeocoder(httpAdapter, options) {\n    NominatimMapquestGeocoder.super_.call(this, httpAdapter, options);\n\n    if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n      throw new Error(this.constructor.name + ' needs an apiKey');\n    }\n    this.options.key = this.options.apiKey;\n    delete this.options.apiKey;\n};\n\nutil.inherits(NominatimMapquestGeocoder, OpenStreetMapGeocoder);\n\nNominatimMapquestGeocoder.prototype._endpoint = 'http://open.mapquestapi.com/nominatim/v1/search';\nNominatimMapquestGeocoder.prototype._endpoint_reverse = 'http://open.mapquestapi.com/nominatim/v1/reverse';\n\n\nmodule.exports = NominatimMapquestGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/tomtomgeocoder.js":"var util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\nvar TomTomGeocoder = function TomTomGeocoder(httpAdapter, options) {\n\n  TomTomGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(TomTomGeocoder, AbstractGeocoder);\n\n// TomTom geocoding API endpoint\nTomTomGeocoder.prototype._endpoint = 'http://api.tomtom.com/lbs/geocoding/geocode';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nTomTomGeocoder.prototype._geocode = function(value, callback) {\n\n  var _this = this;\n\n  var params = {\n    query : value,\n    key   : this.options.apiKey,\n    format: 'json'\n  };\n\n  this.httpAdapter.get(this._endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for(var i = 0; i < result.geoResponse.geoResult.length; i++) {\n          results.push(_this._formatResult(result.geoResponse.geoResult[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTomTomGeocoder.prototype._formatResult = function(result) {\n  return {\n    'latitude' : result.latitude,\n    'longitude' : result.longitude,\n    'country' : result.country,\n    'city' : result.city,\n    'state' : result.state,\n    'zipcode' : result.postcode,\n    'streetName': result.street,\n    'streetNumber' : result.houseNumber,\n    'countryCode' : result.countryISO3\n  };\n};\n\nmodule.exports = TomTomGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/smartystreetsgeocoder.js":"var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * SmartyStreets Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options\n */\nvar SmartyStreets = function SmartyStreets(httpAdapter, auth_id, auth_token) {\n    SmartyStreets.super_.call(this, httpAdapter);\n\n    if(!auth_id && !auth_token){\n      throw new Error('You must specify an auth-id and auth-token!');\n    }\n\n    this.auth_id = auth_id;\n    this.auth_token = auth_token;\n};\n\nutil.inherits(SmartyStreets, AbstractGeocoder);\n\nSmartyStreets.prototype._endpoint = 'https://api.smartystreets.com/street-address';\n\n/**\n* Reverse geocoding\n* @param <integer>  lat      Latittude\n* @param <integer>  lng      Longitude\n* @param <function> callback Callback method\n*/\nSmartyStreets.prototype.reverse = function(lat, lng, callback) {\n    if (typeof this._reverse != 'function') {\n        throw new Error(this.constructor.name + ' doesnt support reverse geocoding!');\n    }\n\n    return this._reverse(lat, lng, callback);\n};\n\n/**\n * Format Result\n **/\nSmartyStreets.prototype._formatResult = function(result) {\n  if(result){\n      return [{\n        'latitude' : result.metadata.latitude,\n        'longitude' : result.metadata.longitude,\n        'country' : null,\n        'city' : result.components.city_name,\n        'zipcode' : result.components.zipcode,\n        'streetName' : result.components.street_name + ' ' + result.components.street_suffix,\n        'streetNumber' : result.components.primary_number,\n        'countryCode' : null,\n        'type' : result.metadata.record_type,\n        'dpv_match' : result.analysis.dpv_match_code,\n        'dpv_footnotes' : result.analysis.dpv_footnotes\n      }];\n  }\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode\n* @param <function> callback Callback method\n*/\nSmartyStreets.prototype.geocode = function(value, callback) {\n    var _this = this;\n\n    var params = {\n      'street': value,\n      'auth-id': this.auth_id,\n      'auth-token': this.auth_token,\n      'format': 'json'\n    };\n\n    this.httpAdapter.get(this._endpoint,params,function(err, result){\n      if(err) {\n        return callback(err);\n      } else {\n        var results = [];\n\n        result.forEach(function(result) {\n          results.push(_this._formatResult(result));\n        });\n\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n};\n\nmodule.exports = SmartyStreets;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/teleportgeocoder.js":"var util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar TeleportGeocoder = function TeleportGeocoder(httpAdapter, options) {\n  TeleportGeocoder.super_.call(this, httpAdapter, options);\n\n  var base = 'https://api.teleport.org/api';\n  this._cities_endpoint = base + '/cities/';\n  this._locations_endpoint = base + '/locations/';\n};\n\nutil.inherits(TeleportGeocoder, AbstractGeocoder);\n\nfunction getEmbeddedPath(parent, path) {\n  var elements = path.split('/');\n  for ( var i in elements) {\n    var element = elements[i];\n    var embedded = parent._embedded;\n    if (!embedded) {\n      return undefined;\n    }\n    var child = embedded[element];\n    if (!child) {\n      return undefined;\n    }\n    parent = child;\n  }\n  return parent;\n}\n\n/**\n * Geocode\n *\n * @param <string>    value     Value to geocode (Address)\n * @param <function>  callback  Callback method\n */\nTeleportGeocoder.prototype._geocode = function(value, callback) {\n  var _this = this;\n\n  var params = {};\n  params.search = value;\n  params.embed = 'city:search-results/city:item/{city:country,city:admin1_division,city:urban_area}';\n\n  this.httpAdapter.get(this._cities_endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'city:search-results') || [];\n        for (var i in searchResults) {\n          var confidence = (25 - i) / 25.0 * 10;\n          results.push(_this._formatResult(searchResults[i], 'city:item', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTeleportGeocoder.prototype._formatResult = function(result, cityRelationName, confidence) {\n  var city = getEmbeddedPath(result, cityRelationName);\n  var admin1 = getEmbeddedPath(city, 'city:admin1_division') || {};\n  var country = getEmbeddedPath(city, 'city:country') || {};\n  var urban_area = getEmbeddedPath(city, 'city:urban_area') || {};\n  var urban_area_links = urban_area._links || {};\n  var extra = {\n    confidence: confidence,\n    urban_area: urban_area.name,\n    urban_area_api_url: (urban_area_links.self || {}).href,\n    urban_area_web_url: urban_area.teleport_city_url\n  };\n  if (result.distance_km) {\n    extra.distance_km = result.distance_km;\n  }\n  if (result.matching_full_name) {\n    extra.matching_full_name = result.matching_full_name;\n  }\n\n  return {\n    'latitude': city.location.latlon.latitude,\n    'longitude': city.location.latlon.longitude,\n    'city': city.name,\n    'country': country.name,\n    'countryCode': country.iso_alpha2,\n    'state': admin1.name,\n    'stateCode': admin1.geonames_admin1_code,\n    'extra': extra\n  };\n};\n\n/**\n * Reverse geocoding\n *\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback          Callback method\n */\nTeleportGeocoder.prototype._reverse = function(query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n  var suffix = lat + ',' + lng;\n\n  var _this = this;\n\n  var params = {};\n  params.embed = 'location:nearest-cities/location:nearest-city/{city:country,city:admin1_division,city:urban_area}';\n\n  this.httpAdapter.get(this._locations_endpoint + suffix, params, function(err, result) {\n    if (err) {\n      throw err;\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'location:nearest-cities') || [];\n        for ( var i in searchResults) {\n          var searchResult = searchResults[i];\n          var confidence = Math.max(0, 25 - searchResult.distance_km) / 25 * 10;\n          results.push(_this._formatResult(searchResult, 'location:nearest-city', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = TeleportGeocoder;\n","/home/travis/build/npmtest/node-npmtest-node-geocoder/node_modules/node-geocoder/lib/geocoder/opendatafrancegeocoder.js":"var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar OpendataFranceGeocoder = function OpendataFranceGeocoder(httpAdapter, options) {\n    this.options = ['language','email','apiKey'];\n\n    OpendataFranceGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(OpendataFranceGeocoder, AbstractGeocoder);\n\nOpendataFranceGeocoder.prototype._endpoint = 'http://api-adresse.data.gouv.fr/search';\n\nOpendataFranceGeocoder.prototype._endpoint_reverse = 'http://api-adresse.data.gouv.fr/reverse';\n\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://opendatafrance/api/)\n* @param <function> callback Callback method\n*/\nOpendataFranceGeocoder.prototype._geocode = function(value, callback) {\n    var _this = this;\n\n    var params = this._getCommonParams();\n\n    if (typeof value == 'string') {\n      params.q = value;\n    } else {\n      if (value.address) {\n        params.q = value.address;\n      }\n      if (value.lat && value.lon) {\n        params.lat = value.lat;\n        params.lon = value.lon;\n      }\n      if (value.zipcode) {\n        params.postcode = value.zipcode;\n      }\n      if (value.type) {\n        params.type = value.type;\n      }\n      if (value.citycode) {\n        params.citycode = value.citycode;\n      }\n    }\n    this._forceParams(params);\n\n    this.httpAdapter.get(this._endpoint, params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            if (result.error) {\n              return callback(new Error(result.error));\n            }\n\n            var results = [];\n\n            if (result.features) {\n              for (var i = 0; i < result.features.length; i++) {\n                results.push(_this._formatResult(result.features[i]));\n              }\n            }\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nOpendataFranceGeocoder.prototype._formatResult = function(result) {\n\n    var latitude = result.geometry.coordinates[1];\n    if (latitude) {\n      latitude = parseFloat(latitude);\n    }\n\n    var longitude = result.geometry.coordinates[0];\n    if (longitude) {\n      longitude = parseFloat(longitude);\n    }\n\n    var properties = result.properties;\n\n    var formatedResult = {\n        latitude : latitude,\n        longitude : longitude,\n        state : properties.context,\n        city : properties.city,\n        zipcode : properties.postcode,\n        citycode : properties.citycode,\n        countryCode : 'FR',\n        country : 'France',\n        type: properties.type,\n        id: properties.id\n    };\n\n    if (properties.type === 'housenumber') {\n      formatedResult.streetName = properties.street;\n      formatedResult.streetNumber = properties.housenumber;\n    } else if (properties.type === 'street') {\n      formatedResult.streetName = properties.name;\n    } else if (properties.type === 'city') {\n      formatedResult.population = properties.population;\n      formatedResult.adm_weight = properties.adm_weight;\n    } else if (properties.type === 'village') {\n      formatedResult.population = properties.population;\n    } else if (properties.type === 'locality') {\n      formatedResult.streetName = properties.name;\n    }\n\n    return formatedResult;\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\nOpendataFranceGeocoder.prototype._reverse = function(query, callback) {\n\n    var _this = this;\n\n    var params = this._getCommonParams();\n    for (var k in query) {\n      var v = query[k];\n      params[k] = v;\n    }\n    this._forceParams(params);\n\n    this.httpAdapter.get(this._endpoint_reverse , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n          if(result.error) {\n            return callback(new Error(result.error));\n          }\n\n          var results = [];\n\n          if (result.features) {\n            for (var i = 0; i < result.features.length; i++) {\n              results.push(_this._formatResult(result.features[i]));\n            }\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nOpendataFranceGeocoder.prototype._getCommonParams = function(){\n    var params = {};\n\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      if (k === 'language') {\n        k = 'accept-language';\n      }\n      params[k] = v;\n    }\n\n    return params;\n};\n\nOpendataFranceGeocoder.prototype._forceParams = function(params){\n  params.limit = 20;\n};\n\nmodule.exports = OpendataFranceGeocoder;\n"}